AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-treeのAPI用SAMテンプレート

Parameters:
  # Network
  FunctionSecurityGroupId:
    Type: "String"
    Default: ""
  
  PrivateSubnet1Id:
    Type: "String"
    Default: ""

  PrivateSubnet2Id:
    Type: "String"
    Default: ""

  # DB
  DBEndpoint:
    Type: "String"

  DBPort:
    Type: "Number"
    MinValue: 1150
    MaxValue: 65535
    Default: 3306
  
  DBRootUserName:
    Type: String
    MaxLength: 16
    MinLength: 1
    Default: "root"
  
  DBRootUserPwd:
    NoEcho: true
    Type: "String"
    MinLength: 1
    MaxLength: 41
  
  # Api gateway
  Stage: 
    Type: String
    Default: "Test"

  # Application
  AllowOrigin:
    Type: String

Globals:
  Function:
    Runtime: go1.x    
    Timeout: 30
    Tracing: Active
    VpcConfig:
      SecurityGroupIds:
        - !Ref FunctionSecurityGroupId
      SubnetIds:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
    Environment:
        Variables:
          GIN_MODE: release
          ALLOW_ORIGINS: !Ref AllowOrigin
          DB_CONNECTION_STRING: !Sub '${DBRootUserName}:${DBRootUserPwd}@tcp(${DBEndpoint}:${DBPort})/todo_tree?charset=utf8mb4&parseTime=True&loc=Local'

Resources:
  # API Gateway
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS'"
        AllowHeaders: "'Access-Control-Allow-Credentials, Access-Control-Allow-Headers, Content-Type, Content-Length, Accept-Encoding, x-api-key'"
        AllowOrigin: !Join [ "", [ "'", !Ref AllowOrigin, "'" ] ]
        MaxAge: "'600'"
        AllowCredentials: True

  APIKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: 
      - APIGateway
      - APIGatewayStage
    Properties: 
      Name: "dev"
      Description: "dev environment api key."
      Enabled: true

  APIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: 
      - APIGateway
      - APIGatewayStage
    Properties: 
      UsagePlanName: "dev"
      Description: "dev environment api usage plan."
      ApiStages: 
        - ApiId: !Ref APIGateway
          Stage: !Ref Stage
      Throttle: 
        BurstLimit: 200
        RateLimit: 100
  
  APIUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - APIKey
      - APIUsagePlan
    Properties: 
      KeyId: !Ref APIKey
      KeyType: "API_KEY"
      UsagePlanId: !Ref APIUsagePlan

  # Lambda
  GetTodoList:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/todo/get-list/
      Handler: todo-get
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        ApiKey:
          Type: Api
          Properties:
            Path: /todo/list
            Method: GET
            RestApiId: !Ref APIGateway
            Auth:
              ApiKeyRequired: true
  
  GetTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/todo/get/
      Handler: todo-get
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        ApiKey:
          Type: Api
          Properties:
            Path: /todo
            Method: GET
            RestApiId: !Ref APIGateway
            Auth:
              ApiKeyRequired: true
  
  PostTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/todo/post/
      Handler: todo-post
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        ApiKey:
          Type: Api
          Properties:
            Path: /todo
            Method: POST
            RestApiId: !Ref APIGateway
            Auth:
              ApiKeyRequired: true
  
  PutTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/todo/put/
      Handler: todo-put
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        ApiKey:
          Type: Api
          Properties:
            Path: /todo
            Method: PUT
            RestApiId: !Ref APIGateway
            Auth:
              ApiKeyRequired: true
  
  DeleteTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/todo/delete/
      Handler: todo-delete
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        ApiKey:
          Type: Api
          Properties:
            Path: /todo
            Method: DELETE
            RestApiId: !Ref APIGateway
            Auth:
              ApiKeyRequired: true
